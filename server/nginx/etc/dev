upstream client {
    server client:80;
}

upstream renderer {
    server renderer:3000;
}

map $http_user_agent $embed_prefix {
    ~*(discordbot|twitterbot|facebookexternalhit)/  /api/embed;
}

server {
    server_name booru bagg bfilter bfilter2;
    listen 4000;
    client_max_body_size 40M;
    client_body_timeout 30s;

    location / {
        # Set default upstream
        set $proxy_target http://client;

        # Check for crawlers and update target if needed
        if ($http_user_agent ~* (googlebot|bingbot)) {
            set $proxy_target http://renderer;
            # Construct the URL for the renderer: /render/<client_url><original_uri>
            set $proxy_path_target /render/http://client$request_uri;
        }

        # Pass to the selected target
        proxy_pass $proxy_target;
        proxy_http_version 1.1; # Often needed for keep-alive with Node.js
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host; # Pass original host
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location ~ ^/[0-9]+ {
        # Set default upstream and path
        set $proxy_target http://client;
        set $proxy_path_target $embed_prefix$request_uri;

        # Check for crawlers and update target/path if needed
        if ($http_user_agent ~* (googlebot|bingbot)) {
            set $proxy_target http://renderer;
            # Construct the URL for the renderer: /render/<client_url><original_uri>
            set $proxy_path_target /render/http://client$request_uri;
        }

        # Pass to the selected target
        proxy_pass $proxy_target$proxy_path_target;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location ~ /posts/.*?([0-9]+\.[a-z0-9]+$) {
        add_header 'Cache-Control' 'public, max-age=2592000, immutable';
        #alias /mnt/volume_nyc3_04/szurubooru/data/posts/;
        #try_files /mnt/volume_nyc3_04/szurubooru/data/posts/$1 =404;

        proxy_pass http://client/posts/$1;

        #error_page 403 @unauthorized;
        #error_page 404 @notfound;
    }

    location /thumbnails/.*?([0-9]+\.[a-z0-9]+$) {
        add_header 'Cache-Control' 'public, max-age=2592000, immutable';
        #alias /mnt/volume_nyc3_04/szurubooru/data/generated-thumbnails/;
        #try_files /mnt/volume_nyc3_04/szurubooru/data/generated-thumbnails/$1 =404;


        proxy_pass http://client/thumbnails/$1;

        #error_page 403 @unauthorized;
        #error_page 404 @notfound;
    }

    #location /api/tag-siblings {
    #    proxy_pass http://client/api/tag-siblings;
    #    include /opt/booru/server/nginx/proxy;
    #
    #    proxy_cache main_cache;
    #    proxy_cache_valid 200 10m;
    #    add_header 'Cache-Control' 'public, max-age=600';
    #}

    location ~ /discord/? {
        return 200 "discord";
    }

    location @err {
        return 500 "internal server error";
        default_type text/plain;
    }
    location @throttle {
        return 503 "please try again later";
        default_type text/plain;
    }
}
