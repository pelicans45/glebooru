worker_processes auto;
user nginx;

error_log /dev/stderr warn;
pid /var/run/nginx.pid;

events {
    worker_connections 8192;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '[$host] $http_x_real_ip -> $request_method $request_uri [$status] - "$http_referer"';
    access_log /dev/stdout main;

    server_tokens off;
    keepalive_timeout 65;

    proxy_cache_path /tmp/nginx-cache
                     levels=1:2
                     keys_zone=spa_cache:8m
                     max_size=50m
                     inactive=60m
                     use_temp_path=off;


    upstream backend {
        server __BACKEND__:6666;
    }

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    server {
        listen 80 default_server;

        location ~ ^/api$ {
            return 302 /api/;
        }

        location ~ ^/api/(.*)$ {
            add_header 'Access-Control-Allow-Origin' '*';
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Methods'
                    'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers'
                    'Authorization, Content-Type';
                return 200;
            }

            client_max_body_size 1073741824;

            gzip on;
            gzip_comp_level 3;
            gzip_min_length 20;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain application/json;

            if ($request_uri ~* "/api/(.*)") {
                proxy_pass http://backend/$1;
            }

            error_page 500 502 503 504 @badproxy;
        }

        location /data/ {
            rewrite ^/data/(.*) /$1 break;
            root /data;

            error_page 403 @unauthorized;
            error_page 404 @notfound;
        }

        location /posts/ {
            add_header 'Cache-Control' 'public, max-age=2592000, immutable';
            alias /data/posts/;

            error_page 403 @unauthorized;
            error_page 404 @notfound;
        }

        location /thumbnails/ {
            add_header 'Cache-Control' 'public, max-age=2592000, immutable';
            alias /data/generated-thumbnails/;

            error_page 403 @unauthorized;
            error_page 404 @notfound;
        }

        location ~ ^/(js|css|img|fonts)/.*$ {
            root /var/www/$host;
            try_files $uri /index.html;

            gzip_static on;
            gzip_proxied expired no-cache no-store private auth;

            error_page 404 @notfound;
        }

        location / {
            root /var/www/$host;
            try_files $uri /index.html;

            # remove unneeded auth headers to improve caching
            proxy_set_header Authorization "";

            #proxy_cache spa_cache;
            #proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            #proxy_cache_background_update on;
            #proxy_cache_lock on;
            #proxy_cache_lock_age 2s;
            #proxy_cache_lock_timeout 2s;

            #proxy_cache_valid 200 302 30s;

            gzip on;
            gzip_comp_level 3;
            gzip_min_length 20;
            gzip_proxied any;
            gzip_types text/plain application/json;

            if ( $http_accept ~ "application/json" ) {
                return 406 "API requests should be sent to the /api prefix";
            }

            if ($request_uri ~* "/(.*)") {
                proxy_pass http://backend/html/$1;
            }

            error_page 500 502 503 504 @badproxy;
        }

        #location / {
        #    gzip_static on;
        #    gzip_proxied expired no-cache no-store private auth;
        #}

        location @unauthorized {
            return 403 "unauthorized";
            default_type text/plain;
        }

        location @notfound {
            return 404 "not found";
            default_type text/plain;
        }

        location @badproxy {
            return 502 "API connection failed";
            default_type text/plain;
        }
    }
}

daemon off;
